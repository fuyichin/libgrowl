libgrowl: the main library source.
growlnotify: growlnotify program in example directory.
cmocka: cmocka unit testing framework.
serverhack: simple server hack to replace growl server.
unix/makefile/automake: eg. makefile or automake.
xcode: macOS build tools
vscode: vscode.
document: documentation.

[x] cr1. cmocka. bsd_get_platform_name_test fail. A different platform name on Big Sur 11.6.
  description: The platform name retrieve from sw_vers has changed to 'macOS' since Mac OS 11, compare with the previous 'Mac OS X'
  solution: to implement -D_macOS in compile time?
cr2. document. Fix Readme.md file for Linux pandoc Latex. '==>'
  Still working if output with othe application.
cr3. cmocka. run_unit_test.sh only process the first parameter
[x] cr4. cmocka. CFLAGS not inlcuded in the compile for libgrowl.c
libgrowl.o: ../src/libgrowl.c
  $(CC) -c ../src/libgrowl.c -I../src  # <== missing CFLAGS 
[x] cr5. review TODO, add new solutions. eg. check platform name in test case.
[x] cr6. cmocka. libgrowl. Fix test_bsd_get_platform_name_version(). Big Sur return 'macOS', older version return 'Mac OS X'.
[v] cr7. automake. Initial framework and changes for automake autogen.sh.
[x] cr8. cmocka. libgrowl. Improvement for multi-platform. refer cr6.
[x] cr9. tag: serverhack. Write a simple server hack to replace growl notificatin server, eg. for ChromeOS development. refer cr15. 
[x] cr10. cmocka. tag: unix_get_system_name. unix_get_system_name() may overflow?
remove debug message for test_bsd_get_platform_name_version()
[ ] cr11. makefile. inconsistant preprocessor description for os eg. LinuxOS ChromeOS MacOS DarwinOS
standardize OS name. ref cr18. cr19. cr20.
  libgrowl. grownotify. cmocka. automake. Standardize pre-processor name for os platform:
  Linux: _LinuxOS (other platforms are: _Windows, _Darwin _Solaris)
[*] cr12. makefile. missing files for auto configure. install-sh, Makefile.in
[*] cr13. libgrowl. missing parameter description in function: gntp_get_header_value()
very simple changes, may add in more in the future
[ ] cr14. add in unix manual page
Locate in man subdir, edit by program manedit
growl_register_notifications()
growl_send_notification()
[*] cr15. - change gntp_decode_reply() to gntp_decode_message() for cr9.
struct gntp_message {
  int status;  /* 0-ok */ /* <-- should be type, not status */
};
message type. reply: ok, fail. request: register, notify.
place struct gntp_message to gntp.h
This involve quit a lot of changes, ready for serverhack program
files: src/libgrowl.c, cmocka/gntp_decode_reply_test.c 
[*] cr16. automake. tag: guessos. use uname to guess os platform when config.guess script is not available. 
file: configure.ac
# detect os platform
if test -x "./config.guess"; then
host_os=`./config.guess`
else
host_os=`uname -o`
fi
case
  *[[Ll]]inux* )
[*] cr17. automake. remove files generated by automake, but keep Makefile.
[ ] cr18. libgrowl. grownotify. cmocka. automake. Standardize pre-processor name for os platform:
  mac: _Darwin MacOS (classic) macOS
[ ] cr19. libgrowl. grownotify. cmocka. automake. Standardize pre-processor name for os platform:
  Windows: _Windows Win32 Win64
[ ] cr20. libgrowl. grownotify. cmocka. automake. Standardize pre-processor name for os platform:
  Sun: _SunOS Solaris
[*] (1) cr21. libnotify. automake. Detect libnotify in automake configure script, enable by default, can be disable manually:
  libnotify enable by default, can by disable by --disable-libnotify in configure script
  if libnotify not detected on the host, disable it.
  if libnotify is enable, add -D_LIBNOTIFY in CFLAGS
  console mode (output to display, not dbus) can be enabled in run time (cr22.)
[*] (1) cr22. libnotify. serverhack. Create the logic for console_mode, console_mode output code in cr23.
  console_mode off for LIBNOTIFY, else on.
  #ifdef _LIBNOTIFY
    // send message to dbus
    if console_mode==TRUE
      // send message to console display
    else
      // send message to dbus
  #else
    if console_mode==TRUE
      // send message to console display, code detail in cr23.
  #endif
  [ ] cr23. libnotify. Code for detect console mode in runtime and output messages. ref cr22.
    --console 1|on, console_mode=TRUE
    Output format: index:[title]<message>(ip)
    index can be turn on by --set-nu
[ ] cr24. growlnotify. Rearrange parameter to 'growlnotify <message> [<messages ...] [-t <title>]'
  Earlier paramater is 1. <message> 2. <title> <message>, message is 1st or 2nd depends on <title> is provided or not. I find it confusing.
[*] cr25. reformat serverhack.c nicely. 
[ ] cr26. serverhack. allow to receive and send multiple notification message
  if gntp_register
    init_libnotify
  else if gntp_notify
    send message
  else /* any other gntp message, return fail */
    return fail;
[ ] cr27. ref cr24. send_multiple_msg. Allow growlnotify to send multiple notification message.
[x] cr28. cmocka. Test case for serverhack.c, get_param_mode().
[ ] cr29. disable_libnotify. automake. Add --disable-libnotify in configure script
  - add --disable-libnotify in configure script, default libnotify="on"
  This is to test the code without libnotify, even compile on a host with libnotify
  $ ./configure --disable-libnotify
  $ make clean; make check
[ ] Discussion. Target to remove unnecessary C preprocessor macro _HACKSERVER, _TEST
  Too many preprocessor macro makes serverhack.c program logic hard to read and understand.

  [ ] _HACKSERVER, remove_hackserver_macro
  Always create serverhack program, just do not installed in binary. 
  Remove the 2nd main() in serverhack.c
  configure.ac, remove --enable-serverhack
  [ ] _TEST
  Move get_param_mode() to a seperate file param.c and param.h
  Remove _TEST from cmocka/Makefile.am
